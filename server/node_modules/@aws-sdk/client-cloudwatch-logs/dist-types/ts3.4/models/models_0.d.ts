import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { CloudWatchLogsServiceException as __BaseException } from "./CloudWatchLogsServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const PolicyType: {
  readonly DATA_PROTECTION_POLICY: "DATA_PROTECTION_POLICY";
  readonly SUBSCRIPTION_FILTER_POLICY: "SUBSCRIPTION_FILTER_POLICY";
};
export type PolicyType = (typeof PolicyType)[keyof typeof PolicyType];
export declare const Scope: {
  readonly ALL: "ALL";
};
export type Scope = (typeof Scope)[keyof typeof Scope];
export interface AccountPolicy {
  policyName?: string;
  policyDocument?: string;
  lastUpdatedTime?: number;
  policyType?: PolicyType;
  scope?: Scope;
  selectionCriteria?: string;
  accountId?: string;
}
export interface LogEvent {
  timestamp?: number;
  message?: string;
}
export interface PatternToken {
  dynamicTokenPosition?: number;
  isDynamic?: boolean;
  tokenString?: string;
  enumerations?: Record<string, number>;
}
export declare const State: {
  readonly Active: "Active";
  readonly Baseline: "Baseline";
  readonly Suppressed: "Suppressed";
};
export type State = (typeof State)[keyof typeof State];
export interface Anomaly {
  anomalyId: string | undefined;
  patternId: string | undefined;
  anomalyDetectorArn: string | undefined;
  patternString: string | undefined;
  patternRegex?: string;
  priority?: string;
  firstSeen: number | undefined;
  lastSeen: number | undefined;
  description: string | undefined;
  active: boolean | undefined;
  state: State | undefined;
  histogram: Record<string, number> | undefined;
  logSamples: LogEvent[] | undefined;
  patternTokens: PatternToken[] | undefined;
  logGroupArnList: string[] | undefined;
  suppressed?: boolean;
  suppressedDate?: number;
  suppressedUntil?: number;
  isPatternLevelSuppression?: boolean;
}
export declare const AnomalyDetectorStatus: {
  readonly ANALYZING: "ANALYZING";
  readonly DELETED: "DELETED";
  readonly FAILED: "FAILED";
  readonly INITIALIZING: "INITIALIZING";
  readonly PAUSED: "PAUSED";
  readonly TRAINING: "TRAINING";
};
export type AnomalyDetectorStatus =
  (typeof AnomalyDetectorStatus)[keyof typeof AnomalyDetectorStatus];
export declare const EvaluationFrequency: {
  readonly FIFTEEN_MIN: "FIFTEEN_MIN";
  readonly FIVE_MIN: "FIVE_MIN";
  readonly ONE_HOUR: "ONE_HOUR";
  readonly ONE_MIN: "ONE_MIN";
  readonly TEN_MIN: "TEN_MIN";
  readonly THIRTY_MIN: "THIRTY_MIN";
};
export type EvaluationFrequency =
  (typeof EvaluationFrequency)[keyof typeof EvaluationFrequency];
export interface AnomalyDetector {
  anomalyDetectorArn?: string;
  detectorName?: string;
  logGroupArnList?: string[];
  evaluationFrequency?: EvaluationFrequency;
  filterPattern?: string;
  anomalyDetectorStatus?: AnomalyDetectorStatus;
  kmsKeyId?: string;
  creationTimeStamp?: number;
  lastModifiedTimeStamp?: number;
  anomalyVisibilityTime?: number;
}
export interface AssociateKmsKeyRequest {
  logGroupName?: string;
  kmsKeyId: string | undefined;
  resourceIdentifier?: string;
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class OperationAbortedException extends __BaseException {
  readonly name: "OperationAbortedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OperationAbortedException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export interface CancelExportTaskRequest {
  taskId: string | undefined;
}
export declare class InvalidOperationException extends __BaseException {
  readonly name: "InvalidOperationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidOperationException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateDeliveryRequest {
  deliverySourceName: string | undefined;
  deliveryDestinationArn: string | undefined;
  tags?: Record<string, string>;
}
export declare const DeliveryDestinationType: {
  readonly CWL: "CWL";
  readonly FH: "FH";
  readonly S3: "S3";
};
export type DeliveryDestinationType =
  (typeof DeliveryDestinationType)[keyof typeof DeliveryDestinationType];
export interface Delivery {
  id?: string;
  arn?: string;
  deliverySourceName?: string;
  deliveryDestinationArn?: string;
  deliveryDestinationType?: DeliveryDestinationType;
  tags?: Record<string, string>;
}
export interface CreateDeliveryResponse {
  delivery?: Delivery;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CreateExportTaskRequest {
  taskName?: string;
  logGroupName: string | undefined;
  logStreamNamePrefix?: string;
  from: number | undefined;
  to: number | undefined;
  destination: string | undefined;
  destinationPrefix?: string;
}
export interface CreateExportTaskResponse {
  taskId?: string;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export interface CreateLogAnomalyDetectorRequest {
  logGroupArnList: string[] | undefined;
  detectorName?: string;
  evaluationFrequency?: EvaluationFrequency;
  filterPattern?: string;
  kmsKeyId?: string;
  anomalyVisibilityTime?: number;
  tags?: Record<string, string>;
}
export interface CreateLogAnomalyDetectorResponse {
  anomalyDetectorArn?: string;
}
export declare const LogGroupClass: {
  readonly INFREQUENT_ACCESS: "INFREQUENT_ACCESS";
  readonly STANDARD: "STANDARD";
};
export type LogGroupClass = (typeof LogGroupClass)[keyof typeof LogGroupClass];
export interface CreateLogGroupRequest {
  logGroupName: string | undefined;
  kmsKeyId?: string;
  tags?: Record<string, string>;
  logGroupClass?: LogGroupClass;
}
export interface CreateLogStreamRequest {
  logGroupName: string | undefined;
  logStreamName: string | undefined;
}
export declare class DataAlreadyAcceptedException extends __BaseException {
  readonly name: "DataAlreadyAcceptedException";
  readonly $fault: "client";
  expectedSequenceToken?: string;
  constructor(
    opts: __ExceptionOptionType<DataAlreadyAcceptedException, __BaseException>
  );
}
export declare const DataProtectionStatus: {
  readonly ACTIVATED: "ACTIVATED";
  readonly ARCHIVED: "ARCHIVED";
  readonly DELETED: "DELETED";
  readonly DISABLED: "DISABLED";
};
export type DataProtectionStatus =
  (typeof DataProtectionStatus)[keyof typeof DataProtectionStatus];
export interface DeleteAccountPolicyRequest {
  policyName: string | undefined;
  policyType: PolicyType | undefined;
}
export interface DeleteDataProtectionPolicyRequest {
  logGroupIdentifier: string | undefined;
}
export interface DeleteDeliveryRequest {
  id: string | undefined;
}
export interface DeleteDeliveryDestinationRequest {
  name: string | undefined;
}
export interface DeleteDeliveryDestinationPolicyRequest {
  deliveryDestinationName: string | undefined;
}
export interface DeleteDeliverySourceRequest {
  name: string | undefined;
}
export interface DeleteDestinationRequest {
  destinationName: string | undefined;
}
export interface DeleteLogAnomalyDetectorRequest {
  anomalyDetectorArn: string | undefined;
}
export interface DeleteLogGroupRequest {
  logGroupName: string | undefined;
}
export interface DeleteLogStreamRequest {
  logGroupName: string | undefined;
  logStreamName: string | undefined;
}
export interface DeleteMetricFilterRequest {
  logGroupName: string | undefined;
  filterName: string | undefined;
}
export interface DeleteQueryDefinitionRequest {
  queryDefinitionId: string | undefined;
}
export interface DeleteQueryDefinitionResponse {
  success?: boolean;
}
export interface DeleteResourcePolicyRequest {
  policyName?: string;
}
export interface DeleteRetentionPolicyRequest {
  logGroupName: string | undefined;
}
export interface DeleteSubscriptionFilterRequest {
  logGroupName: string | undefined;
  filterName: string | undefined;
}
export interface DeliveryDestinationConfiguration {
  destinationResourceArn: string | undefined;
}
export declare const OutputFormat: {
  readonly JSON: "json";
  readonly PARQUET: "parquet";
  readonly PLAIN: "plain";
  readonly RAW: "raw";
  readonly W3C: "w3c";
};
export type OutputFormat = (typeof OutputFormat)[keyof typeof OutputFormat];
export interface DeliveryDestination {
  name?: string;
  arn?: string;
  deliveryDestinationType?: DeliveryDestinationType;
  outputFormat?: OutputFormat;
  deliveryDestinationConfiguration?: DeliveryDestinationConfiguration;
  tags?: Record<string, string>;
}
export interface DeliverySource {
  name?: string;
  arn?: string;
  resourceArns?: string[];
  service?: string;
  logType?: string;
  tags?: Record<string, string>;
}
export interface DescribeAccountPoliciesRequest {
  policyType: PolicyType | undefined;
  policyName?: string;
  accountIdentifiers?: string[];
}
export interface DescribeAccountPoliciesResponse {
  accountPolicies?: AccountPolicy[];
}
export interface DescribeDeliveriesRequest {
  nextToken?: string;
  limit?: number;
}
export interface DescribeDeliveriesResponse {
  deliveries?: Delivery[];
  nextToken?: string;
}
export interface DescribeDeliveryDestinationsRequest {
  nextToken?: string;
  limit?: number;
}
export interface DescribeDeliveryDestinationsResponse {
  deliveryDestinations?: DeliveryDestination[];
  nextToken?: string;
}
export interface DescribeDeliverySourcesRequest {
  nextToken?: string;
  limit?: number;
}
export interface DescribeDeliverySourcesResponse {
  deliverySources?: DeliverySource[];
  nextToken?: string;
}
export interface DescribeDestinationsRequest {
  DestinationNamePrefix?: string;
  nextToken?: string;
  limit?: number;
}
export interface Destination {
  destinationName?: string;
  targetArn?: string;
  roleArn?: string;
  accessPolicy?: string;
  arn?: string;
  creationTime?: number;
}
export interface DescribeDestinationsResponse {
  destinations?: Destination[];
  nextToken?: string;
}
export declare const ExportTaskStatusCode: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly PENDING_CANCEL: "PENDING_CANCEL";
  readonly RUNNING: "RUNNING";
};
export type ExportTaskStatusCode =
  (typeof ExportTaskStatusCode)[keyof typeof ExportTaskStatusCode];
export interface DescribeExportTasksRequest {
  taskId?: string;
  statusCode?: ExportTaskStatusCode;
  nextToken?: string;
  limit?: number;
}
export interface ExportTaskExecutionInfo {
  creationTime?: number;
  completionTime?: number;
}
export interface ExportTaskStatus {
  code?: ExportTaskStatusCode;
  message?: string;
}
export interface ExportTask {
  taskId?: string;
  taskName?: string;
  logGroupName?: string;
  from?: number;
  to?: number;
  destination?: string;
  destinationPrefix?: string;
  status?: ExportTaskStatus;
  executionInfo?: ExportTaskExecutionInfo;
}
export interface DescribeExportTasksResponse {
  exportTasks?: ExportTask[];
  nextToken?: string;
}
export interface DescribeLogGroupsRequest {
  accountIdentifiers?: string[];
  logGroupNamePrefix?: string;
  logGroupNamePattern?: string;
  nextToken?: string;
  limit?: number;
  includeLinkedAccounts?: boolean;
  logGroupClass?: LogGroupClass;
}
export declare const InheritedProperty: {
  readonly ACCOUNT_DATA_PROTECTION: "ACCOUNT_DATA_PROTECTION";
};
export type InheritedProperty =
  (typeof InheritedProperty)[keyof typeof InheritedProperty];
export interface LogGroup {
  logGroupName?: string;
  creationTime?: number;
  retentionInDays?: number;
  metricFilterCount?: number;
  arn?: string;
  storedBytes?: number;
  kmsKeyId?: string;
  dataProtectionStatus?: DataProtectionStatus;
  inheritedProperties?: InheritedProperty[];
  logGroupClass?: LogGroupClass;
  logGroupArn?: string;
}
export interface DescribeLogGroupsResponse {
  logGroups?: LogGroup[];
  nextToken?: string;
}
export declare const OrderBy: {
  readonly LastEventTime: "LastEventTime";
  readonly LogStreamName: "LogStreamName";
};
export type OrderBy = (typeof OrderBy)[keyof typeof OrderBy];
export interface DescribeLogStreamsRequest {
  logGroupName?: string;
  logGroupIdentifier?: string;
  logStreamNamePrefix?: string;
  orderBy?: OrderBy;
  descending?: boolean;
  nextToken?: string;
  limit?: number;
}
export interface LogStream {
  logStreamName?: string;
  creationTime?: number;
  firstEventTimestamp?: number;
  lastEventTimestamp?: number;
  lastIngestionTime?: number;
  uploadSequenceToken?: string;
  arn?: string;
  storedBytes?: number;
}
export interface DescribeLogStreamsResponse {
  logStreams?: LogStream[];
  nextToken?: string;
}
export interface DescribeMetricFiltersRequest {
  logGroupName?: string;
  filterNamePrefix?: string;
  nextToken?: string;
  limit?: number;
  metricName?: string;
  metricNamespace?: string;
}
export declare const StandardUnit: {
  readonly Bits: "Bits";
  readonly BitsSecond: "Bits/Second";
  readonly Bytes: "Bytes";
  readonly BytesSecond: "Bytes/Second";
  readonly Count: "Count";
  readonly CountSecond: "Count/Second";
  readonly Gigabits: "Gigabits";
  readonly GigabitsSecond: "Gigabits/Second";
  readonly Gigabytes: "Gigabytes";
  readonly GigabytesSecond: "Gigabytes/Second";
  readonly Kilobits: "Kilobits";
  readonly KilobitsSecond: "Kilobits/Second";
  readonly Kilobytes: "Kilobytes";
  readonly KilobytesSecond: "Kilobytes/Second";
  readonly Megabits: "Megabits";
  readonly MegabitsSecond: "Megabits/Second";
  readonly Megabytes: "Megabytes";
  readonly MegabytesSecond: "Megabytes/Second";
  readonly Microseconds: "Microseconds";
  readonly Milliseconds: "Milliseconds";
  readonly None: "None";
  readonly Percent: "Percent";
  readonly Seconds: "Seconds";
  readonly Terabits: "Terabits";
  readonly TerabitsSecond: "Terabits/Second";
  readonly Terabytes: "Terabytes";
  readonly TerabytesSecond: "Terabytes/Second";
};
export type StandardUnit = (typeof StandardUnit)[keyof typeof StandardUnit];
export interface MetricTransformation {
  metricName: string | undefined;
  metricNamespace: string | undefined;
  metricValue: string | undefined;
  defaultValue?: number;
  dimensions?: Record<string, string>;
  unit?: StandardUnit;
}
export interface MetricFilter {
  filterName?: string;
  filterPattern?: string;
  metricTransformations?: MetricTransformation[];
  creationTime?: number;
  logGroupName?: string;
}
export interface DescribeMetricFiltersResponse {
  metricFilters?: MetricFilter[];
  nextToken?: string;
}
export declare const QueryStatus: {
  readonly Cancelled: "Cancelled";
  readonly Complete: "Complete";
  readonly Failed: "Failed";
  readonly Running: "Running";
  readonly Scheduled: "Scheduled";
  readonly Timeout: "Timeout";
  readonly Unknown: "Unknown";
};
export type QueryStatus = (typeof QueryStatus)[keyof typeof QueryStatus];
export interface DescribeQueriesRequest {
  logGroupName?: string;
  status?: QueryStatus;
  maxResults?: number;
  nextToken?: string;
}
export interface QueryInfo {
  queryId?: string;
  queryString?: string;
  status?: QueryStatus;
  createTime?: number;
  logGroupName?: string;
}
export interface DescribeQueriesResponse {
  queries?: QueryInfo[];
  nextToken?: string;
}
export interface DescribeQueryDefinitionsRequest {
  queryDefinitionNamePrefix?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface QueryDefinition {
  queryDefinitionId?: string;
  name?: string;
  queryString?: string;
  lastModified?: number;
  logGroupNames?: string[];
}
export interface DescribeQueryDefinitionsResponse {
  queryDefinitions?: QueryDefinition[];
  nextToken?: string;
}
export interface DescribeResourcePoliciesRequest {
  nextToken?: string;
  limit?: number;
}
export interface ResourcePolicy {
  policyName?: string;
  policyDocument?: string;
  lastUpdatedTime?: number;
}
export interface DescribeResourcePoliciesResponse {
  resourcePolicies?: ResourcePolicy[];
  nextToken?: string;
}
export interface DescribeSubscriptionFiltersRequest {
  logGroupName: string | undefined;
  filterNamePrefix?: string;
  nextToken?: string;
  limit?: number;
}
export declare const Distribution: {
  readonly ByLogStream: "ByLogStream";
  readonly Random: "Random";
};
export type Distribution = (typeof Distribution)[keyof typeof Distribution];
export interface SubscriptionFilter {
  filterName?: string;
  logGroupName?: string;
  filterPattern?: string;
  destinationArn?: string;
  roleArn?: string;
  distribution?: Distribution;
  creationTime?: number;
}
export interface DescribeSubscriptionFiltersResponse {
  subscriptionFilters?: SubscriptionFilter[];
  nextToken?: string;
}
export interface DisassociateKmsKeyRequest {
  logGroupName?: string;
  resourceIdentifier?: string;
}
export interface FilteredLogEvent {
  logStreamName?: string;
  timestamp?: number;
  message?: string;
  ingestionTime?: number;
  eventId?: string;
}
export interface FilterLogEventsRequest {
  logGroupName?: string;
  logGroupIdentifier?: string;
  logStreamNames?: string[];
  logStreamNamePrefix?: string;
  startTime?: number;
  endTime?: number;
  filterPattern?: string;
  nextToken?: string;
  limit?: number;
  interleaved?: boolean;
  unmask?: boolean;
}
export interface SearchedLogStream {
  logStreamName?: string;
  searchedCompletely?: boolean;
}
export interface FilterLogEventsResponse {
  events?: FilteredLogEvent[];
  searchedLogStreams?: SearchedLogStream[];
  nextToken?: string;
}
export interface GetDataProtectionPolicyRequest {
  logGroupIdentifier: string | undefined;
}
export interface GetDataProtectionPolicyResponse {
  logGroupIdentifier?: string;
  policyDocument?: string;
  lastUpdatedTime?: number;
}
export interface GetDeliveryRequest {
  id: string | undefined;
}
export interface GetDeliveryResponse {
  delivery?: Delivery;
}
export interface GetDeliveryDestinationRequest {
  name: string | undefined;
}
export interface GetDeliveryDestinationResponse {
  deliveryDestination?: DeliveryDestination;
}
export interface GetDeliveryDestinationPolicyRequest {
  deliveryDestinationName: string | undefined;
}
export interface Policy {
  deliveryDestinationPolicy?: string;
}
export interface GetDeliveryDestinationPolicyResponse {
  policy?: Policy;
}
export interface GetDeliverySourceRequest {
  name: string | undefined;
}
export interface GetDeliverySourceResponse {
  deliverySource?: DeliverySource;
}
export interface GetLogAnomalyDetectorRequest {
  anomalyDetectorArn: string | undefined;
}
export interface GetLogAnomalyDetectorResponse {
  detectorName?: string;
  logGroupArnList?: string[];
  evaluationFrequency?: EvaluationFrequency;
  filterPattern?: string;
  anomalyDetectorStatus?: AnomalyDetectorStatus;
  kmsKeyId?: string;
  creationTimeStamp?: number;
  lastModifiedTimeStamp?: number;
  anomalyVisibilityTime?: number;
}
export interface GetLogEventsRequest {
  logGroupName?: string;
  logGroupIdentifier?: string;
  logStreamName: string | undefined;
  startTime?: number;
  endTime?: number;
  nextToken?: string;
  limit?: number;
  startFromHead?: boolean;
  unmask?: boolean;
}
export interface OutputLogEvent {
  timestamp?: number;
  message?: string;
  ingestionTime?: number;
}
export interface GetLogEventsResponse {
  events?: OutputLogEvent[];
  nextForwardToken?: string;
  nextBackwardToken?: string;
}
export interface GetLogGroupFieldsRequest {
  logGroupName?: string;
  time?: number;
  logGroupIdentifier?: string;
}
export interface LogGroupField {
  name?: string;
  percent?: number;
}
export interface GetLogGroupFieldsResponse {
  logGroupFields?: LogGroupField[];
}
export interface GetLogRecordRequest {
  logRecordPointer: string | undefined;
  unmask?: boolean;
}
export interface GetLogRecordResponse {
  logRecord?: Record<string, string>;
}
export interface GetQueryResultsRequest {
  queryId: string | undefined;
}
export interface ResultField {
  field?: string;
  value?: string;
}
export interface QueryStatistics {
  recordsMatched?: number;
  recordsScanned?: number;
  bytesScanned?: number;
}
export interface GetQueryResultsResponse {
  results?: ResultField[][];
  statistics?: QueryStatistics;
  status?: QueryStatus;
  encryptionKey?: string;
}
export interface InputLogEvent {
  timestamp: number | undefined;
  message: string | undefined;
}
export declare class InvalidSequenceTokenException extends __BaseException {
  readonly name: "InvalidSequenceTokenException";
  readonly $fault: "client";
  expectedSequenceToken?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidSequenceTokenException, __BaseException>
  );
}
export declare const SuppressionState: {
  readonly SUPPRESSED: "SUPPRESSED";
  readonly UNSUPPRESSED: "UNSUPPRESSED";
};
export type SuppressionState =
  (typeof SuppressionState)[keyof typeof SuppressionState];
export interface ListAnomaliesRequest {
  anomalyDetectorArn?: string;
  suppressionState?: SuppressionState;
  limit?: number;
  nextToken?: string;
}
export interface ListAnomaliesResponse {
  anomalies?: Anomaly[];
  nextToken?: string;
}
export interface ListLogAnomalyDetectorsRequest {
  filterLogGroupArn?: string;
  limit?: number;
  nextToken?: string;
}
export interface ListLogAnomalyDetectorsResponse {
  anomalyDetectors?: AnomalyDetector[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListTagsLogGroupRequest {
  logGroupName: string | undefined;
}
export interface ListTagsLogGroupResponse {
  tags?: Record<string, string>;
}
export interface LiveTailSessionLogEvent {
  logStreamName?: string;
  logGroupIdentifier?: string;
  message?: string;
  timestamp?: number;
  ingestionTime?: number;
}
export interface LiveTailSessionMetadata {
  sampled?: boolean;
}
export interface LiveTailSessionStart {
  requestId?: string;
  sessionId?: string;
  logGroupIdentifiers?: string[];
  logStreamNames?: string[];
  logStreamNamePrefixes?: string[];
  logEventFilterPattern?: string;
}
export interface LiveTailSessionUpdate {
  sessionMetadata?: LiveTailSessionMetadata;
  sessionResults?: LiveTailSessionLogEvent[];
}
export interface PutAccountPolicyRequest {
  policyName: string | undefined;
  policyDocument: string | undefined;
  policyType: PolicyType | undefined;
  scope?: Scope;
  selectionCriteria?: string;
}
export interface PutAccountPolicyResponse {
  accountPolicy?: AccountPolicy;
}
export interface PutDataProtectionPolicyRequest {
  logGroupIdentifier: string | undefined;
  policyDocument: string | undefined;
}
export interface PutDataProtectionPolicyResponse {
  logGroupIdentifier?: string;
  policyDocument?: string;
  lastUpdatedTime?: number;
}
export interface PutDeliveryDestinationRequest {
  name: string | undefined;
  outputFormat?: OutputFormat;
  deliveryDestinationConfiguration:
    | DeliveryDestinationConfiguration
    | undefined;
  tags?: Record<string, string>;
}
export interface PutDeliveryDestinationResponse {
  deliveryDestination?: DeliveryDestination;
}
export interface PutDeliveryDestinationPolicyRequest {
  deliveryDestinationName: string | undefined;
  deliveryDestinationPolicy: string | undefined;
}
export interface PutDeliveryDestinationPolicyResponse {
  policy?: Policy;
}
export interface PutDeliverySourceRequest {
  name: string | undefined;
  resourceArn: string | undefined;
  logType: string | undefined;
  tags?: Record<string, string>;
}
export interface PutDeliverySourceResponse {
  deliverySource?: DeliverySource;
}
export interface PutDestinationRequest {
  destinationName: string | undefined;
  targetArn: string | undefined;
  roleArn: string | undefined;
  tags?: Record<string, string>;
}
export interface PutDestinationResponse {
  destination?: Destination;
}
export interface PutDestinationPolicyRequest {
  destinationName: string | undefined;
  accessPolicy: string | undefined;
  forceUpdate?: boolean;
}
export interface PutLogEventsRequest {
  logGroupName: string | undefined;
  logStreamName: string | undefined;
  logEvents: InputLogEvent[] | undefined;
  sequenceToken?: string;
}
export interface RejectedLogEventsInfo {
  tooNewLogEventStartIndex?: number;
  tooOldLogEventEndIndex?: number;
  expiredLogEventEndIndex?: number;
}
export interface PutLogEventsResponse {
  nextSequenceToken?: string;
  rejectedLogEventsInfo?: RejectedLogEventsInfo;
}
export declare class UnrecognizedClientException extends __BaseException {
  readonly name: "UnrecognizedClientException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnrecognizedClientException, __BaseException>
  );
}
export interface PutMetricFilterRequest {
  logGroupName: string | undefined;
  filterName: string | undefined;
  filterPattern: string | undefined;
  metricTransformations: MetricTransformation[] | undefined;
}
export interface PutQueryDefinitionRequest {
  name: string | undefined;
  queryDefinitionId?: string;
  logGroupNames?: string[];
  queryString: string | undefined;
  clientToken?: string;
}
export interface PutQueryDefinitionResponse {
  queryDefinitionId?: string;
}
export interface PutResourcePolicyRequest {
  policyName?: string;
  policyDocument?: string;
}
export interface PutResourcePolicyResponse {
  resourcePolicy?: ResourcePolicy;
}
export interface PutRetentionPolicyRequest {
  logGroupName: string | undefined;
  retentionInDays: number | undefined;
}
export interface PutSubscriptionFilterRequest {
  logGroupName: string | undefined;
  filterName: string | undefined;
  filterPattern: string | undefined;
  destinationArn: string | undefined;
  roleArn?: string;
  distribution?: Distribution;
}
export interface StartLiveTailRequest {
  logGroupIdentifiers: string[] | undefined;
  logStreamNames?: string[];
  logStreamNamePrefixes?: string[];
  logEventFilterPattern?: string;
}
export declare class SessionStreamingException extends __BaseException {
  readonly name: "SessionStreamingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SessionStreamingException, __BaseException>
  );
}
export declare class SessionTimeoutException extends __BaseException {
  readonly name: "SessionTimeoutException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SessionTimeoutException, __BaseException>
  );
}
export type StartLiveTailResponseStream =
  | StartLiveTailResponseStream.SessionStreamingExceptionMember
  | StartLiveTailResponseStream.SessionTimeoutExceptionMember
  | StartLiveTailResponseStream.SessionStartMember
  | StartLiveTailResponseStream.SessionUpdateMember
  | StartLiveTailResponseStream.$UnknownMember;
export declare namespace StartLiveTailResponseStream {
  interface SessionStartMember {
    sessionStart: LiveTailSessionStart;
    sessionUpdate?: never;
    SessionTimeoutException?: never;
    SessionStreamingException?: never;
    $unknown?: never;
  }
  interface SessionUpdateMember {
    sessionStart?: never;
    sessionUpdate: LiveTailSessionUpdate;
    SessionTimeoutException?: never;
    SessionStreamingException?: never;
    $unknown?: never;
  }
  interface SessionTimeoutExceptionMember {
    sessionStart?: never;
    sessionUpdate?: never;
    SessionTimeoutException: SessionTimeoutException;
    SessionStreamingException?: never;
    $unknown?: never;
  }
  interface SessionStreamingExceptionMember {
    sessionStart?: never;
    sessionUpdate?: never;
    SessionTimeoutException?: never;
    SessionStreamingException: SessionStreamingException;
    $unknown?: never;
  }
  interface $UnknownMember {
    sessionStart?: never;
    sessionUpdate?: never;
    SessionTimeoutException?: never;
    SessionStreamingException?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    sessionStart: (value: LiveTailSessionStart) => T;
    sessionUpdate: (value: LiveTailSessionUpdate) => T;
    SessionTimeoutException: (value: SessionTimeoutException) => T;
    SessionStreamingException: (value: SessionStreamingException) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: StartLiveTailResponseStream,
    visitor: Visitor<T>
  ) => T;
}
export interface StartLiveTailResponse {
  responseStream?: AsyncIterable<StartLiveTailResponseStream>;
}
export interface QueryCompileErrorLocation {
  startCharOffset?: number;
  endCharOffset?: number;
}
export interface QueryCompileError {
  location?: QueryCompileErrorLocation;
  message?: string;
}
export declare class MalformedQueryException extends __BaseException {
  readonly name: "MalformedQueryException";
  readonly $fault: "client";
  queryCompileError?: QueryCompileError;
  constructor(
    opts: __ExceptionOptionType<MalformedQueryException, __BaseException>
  );
}
export interface StartQueryRequest {
  logGroupName?: string;
  logGroupNames?: string[];
  logGroupIdentifiers?: string[];
  startTime: number | undefined;
  endTime: number | undefined;
  queryString: string | undefined;
  limit?: number;
}
export interface StartQueryResponse {
  queryId?: string;
}
export interface StopQueryRequest {
  queryId: string | undefined;
}
export interface StopQueryResponse {
  success?: boolean;
}
export interface TagLogGroupRequest {
  logGroupName: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  resourceName?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface TestMetricFilterRequest {
  filterPattern: string | undefined;
  logEventMessages: string[] | undefined;
}
export interface MetricFilterMatchRecord {
  eventNumber?: number;
  eventMessage?: string;
  extractedValues?: Record<string, string>;
}
export interface TestMetricFilterResponse {
  matches?: MetricFilterMatchRecord[];
}
export interface UntagLogGroupRequest {
  logGroupName: string | undefined;
  tags: string[] | undefined;
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export declare const SuppressionUnit: {
  readonly HOURS: "HOURS";
  readonly MINUTES: "MINUTES";
  readonly SECONDS: "SECONDS";
};
export type SuppressionUnit =
  (typeof SuppressionUnit)[keyof typeof SuppressionUnit];
export interface SuppressionPeriod {
  value?: number;
  suppressionUnit?: SuppressionUnit;
}
export declare const SuppressionType: {
  readonly INFINITE: "INFINITE";
  readonly LIMITED: "LIMITED";
};
export type SuppressionType =
  (typeof SuppressionType)[keyof typeof SuppressionType];
export interface UpdateAnomalyRequest {
  anomalyId?: string;
  patternId?: string;
  anomalyDetectorArn: string | undefined;
  suppressionType?: SuppressionType;
  suppressionPeriod?: SuppressionPeriod;
}
export interface UpdateLogAnomalyDetectorRequest {
  anomalyDetectorArn: string | undefined;
  evaluationFrequency?: EvaluationFrequency;
  filterPattern?: string;
  anomalyVisibilityTime?: number;
  enabled: boolean | undefined;
}
export declare const StartLiveTailResponseStreamFilterSensitiveLog: (
  obj: StartLiveTailResponseStream
) => any;
export declare const StartLiveTailResponseFilterSensitiveLog: (
  obj: StartLiveTailResponse
) => any;
